// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  fName          String
  lName          String
  email          String          @unique
  password       String
  role           String
  position       String
  empNumber      String
  createdAt      DateTime        @default(now())
  upDatedAt      DateTime        @default(now())
  departmentId   Int
  department     Department      @relation(fields: departmentId, references: [id])
  fileRequest    fileRequest[]
  forwardedTo    ForwardedMemo[] @relation(name: "forwardedTo")
  forwardedBy    ForwardedMemo[] @relation(name: "forwardedBy")
  userLogs       Log[]
  file           File[]
  userMemos      Memo[]          @relation(name: "fromUserRelation")
  forwardedMemos Memo[]          @relation(name: "toUserRelation")
}

model Department {
  id             Int      @id @default(autoincrement())
  departmentName String   @unique
  users          User[]
  files          File[]
  createdAt      DateTime @default(now())
  upDatedAt      DateTime @default(now())
}

model File {
  fileNo       String        @id @unique
  fileTitle    String
  fileSubject  String
  memos        Memo[]
  department   Department?   @relation(fields: [departmentId], references: [id])
  departmentId Int
  users        User[]
  fileRequest  fileRequest[]
}

model Memo {
  id             Int             @id @default(autoincrement())
  subject        String
  status          String          @default("Pending")
  from           Int
  fromUser       User            @relation(name: "fromUserRelation", fields: [from], references: [id])
  to             Int
  toUser         User            @relation(name: "toUserRelation", fields: [to], references: [id])
  body           String
  createdAt      DateTime        @default(now())
  upDatedAt      DateTime        @default(now())
  fileId         String
  file           File            @relation(fields: [fileId], references: [fileNo])
  forwardHistory ForwardedMemo[]
}

model ForwardedMemo {
  id            Int      @id @default(autoincrement())
  memoId        Int
  status        String
  comment       String?
  forwardedToId Int
  forwardedById Int
  forwardedTo   User     @relation(name: "forwardedTo", fields: [forwardedToId], references: [id])
  forwardedBy   User     @relation(name: "forwardedBy", fields: [forwardedById], references: [id])
  forwardedDate DateTime @default(now())
  memo          Memo     @relation(fields: [memoId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  title     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model fileRequest {
  id            Int      @id @default(autoincrement())
  userId        Int
  reason        String
  status        String
  comment       String?
  requestedBy   User     @relation(fields: [userId], references: [id])
  fileNo        String
  fileRequested File     @relation(fields: [fileNo], references: [fileNo])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}
